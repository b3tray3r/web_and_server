const apiUrl = 'https://serverktor.loca.lt/';

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function fetchUsers() {
  try {
    const res = await fetch(apiUrl);
    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
    return await res.json();
  } catch (e) {
    console.error(e);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.");
    return [];
  }
}

// –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createUserCard(user) {
  const card = document.createElement('div');
  card.className = 'card';

  const icon = document.createElement('div');
  icon.className = 'profile-icon';
  icon.textContent = user.gender === 'male' ? 'üë®' : 'üë©';

  const name = document.createElement('h3');
  name.textContent = user.name;

  const role = document.createElement('p');
  role.textContent = `–†–æ–ª—å: ${user.role}`;

  const age = document.createElement('p');
  age.textContent = `–í–æ–∑—Ä–∞—Å—Ç: ${user.age}`;

  card.appendChild(icon);
  card.appendChild(name);
  card.appendChild(role);
  card.appendChild(age);

  return card;
}

// –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function renderCards(users) {
  const grid = document.getElementById('cardGrid');
  grid.innerHTML = '';
  users.forEach(user => {
    const card = createUserCard(user);
    grid.appendChild(card);
  });
}

// –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function renderStats(users) {
  const statsDiv = document.getElementById('stats');
  if (!users.length) {
    statsDiv.textContent = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç';
    return;
  }

  const totalUsers = users.length;
  const avgAge = Math.round(users.reduce((sum, u) => sum + u.age, 0) / totalUsers);

  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º
  const rolesCount = users.reduce((acc, u) => {
    acc[u.role] = (acc[u.role] || 0) + 1;
    return acc;
  }, {});

  let rolesHTML = '';
  for (const [role, count] of Object.entries(rolesCount)) {
    rolesHTML += `<div><strong>${role}:</strong> ${count}</div>`;
  }

  statsDiv.innerHTML = `
    <div><strong>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> ${totalUsers}</div>
    <div><strong>–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç:</strong> ${avgAge}</div>
    ${rolesHTML}
  `;
}

// –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ä–æ–ª–∏
function handleSearch(users) {
  const input = document.getElementById('search');
  input.addEventListener('input', () => {
    const searchTerm = input.value.toLowerCase();
    const filtered = users.filter(user =>
      user.name.toLowerCase().includes(searchTerm) ||
      user.role.toLowerCase().includes(searchTerm)
    );
    renderCards(filtered);
  });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function addUser(data) {
  try {
    const res = await fetch(`${apiUrl}/users`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    });
    if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return await res.json();
  } catch (e) {
    console.error(e);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
  let users = await fetchUsers();
  renderCards(users);
  renderStats(users);
  handleSearch(users);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const form = document.getElementById('addUserForm');
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const newUser = {
      name: formData.get('name').trim(),
      age: Number(formData.get('age')),
      role: formData.get('role').trim(),
      gender: formData.get('gender'),
    };

    if (!newUser.name || !newUser.role || !newUser.gender || !newUser.age) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return;
    }

    const addedUser = await addUser(newUser);
    if (addedUser) {
      users.push(addedUser);
      renderCards(users);
      renderStats(users);
      form.reset();
    }
  });
}

init();
